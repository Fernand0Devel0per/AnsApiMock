// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MockAbiANS.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MockAbiANS.Migrations
{
    [DbContext(typeof(MockAnsDbContext))]
    partial class MockAnsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MockAbiANS.Entities.Arquivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentoId")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Tamanho")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId")
                        .IsUnique();

                    b.ToTable("Arquivos");
                });

            modelBuilder.Entity("MockAbiANS.Entities.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Assunto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataDocumento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProtocoloId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProtocoloId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("MockAbiANS.Entities.InformacaoAdicional", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("CompetenciaAtendimento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataFimAtendimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("NumeroAtendimento")
                        .HasColumnType("bigint");

                    b.Property<int>("ProtocoloId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProtocoloId");

                    b.ToTable("InformacoesAdicionais");
                });

            modelBuilder.Entity("MockAbiANS.Entities.Protocolo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodOperadora")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NumeroProcesso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SituacaoId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoRegistroId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SituacaoId");

                    b.HasIndex("TipoRegistroId");

                    b.ToTable("Protocolos");
                });

            modelBuilder.Entity("MockAbiANS.Entities.Situacao", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Situacaos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Andamento"
                        });
                });

            modelBuilder.Entity("MockAbiANS.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DocumentoId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId")
                        .IsUnique();

                    b.ToTable("TiposDocumento");
                });

            modelBuilder.Entity("MockAbiANS.Entities.TipoRegistro", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TiposRegistros");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Descricao = "Petição (Encaminhado pela Operadora para a ANS)"
                        });
                });

            modelBuilder.Entity("MockAbiANS.Entities.Arquivo", b =>
                {
                    b.HasOne("MockAbiANS.Entities.Documento", "Documento")
                        .WithOne("Arquivo")
                        .HasForeignKey("MockAbiANS.Entities.Arquivo", "DocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documento");
                });

            modelBuilder.Entity("MockAbiANS.Entities.Documento", b =>
                {
                    b.HasOne("MockAbiANS.Entities.Protocolo", "Protocolo")
                        .WithMany("Documentos")
                        .HasForeignKey("ProtocoloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protocolo");
                });

            modelBuilder.Entity("MockAbiANS.Entities.InformacaoAdicional", b =>
                {
                    b.HasOne("MockAbiANS.Entities.Protocolo", null)
                        .WithOne("InformacoesAdicionais")
                        .HasForeignKey("MockAbiANS.Entities.InformacaoAdicional", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MockAbiANS.Entities.Protocolo", "Protocolo")
                        .WithMany()
                        .HasForeignKey("ProtocoloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Protocolo");
                });

            modelBuilder.Entity("MockAbiANS.Entities.Protocolo", b =>
                {
                    b.HasOne("MockAbiANS.Entities.Situacao", "Situacao")
                        .WithMany()
                        .HasForeignKey("SituacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MockAbiANS.Entities.TipoRegistro", "TipoRegistro")
                        .WithMany()
                        .HasForeignKey("TipoRegistroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Situacao");

                    b.Navigation("TipoRegistro");
                });

            modelBuilder.Entity("MockAbiANS.Entities.TipoDocumento", b =>
                {
                    b.HasOne("MockAbiANS.Entities.Documento", "Documento")
                        .WithOne("TipoDocumento")
                        .HasForeignKey("MockAbiANS.Entities.TipoDocumento", "DocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documento");
                });

            modelBuilder.Entity("MockAbiANS.Entities.Documento", b =>
                {
                    b.Navigation("Arquivo")
                        .IsRequired();

                    b.Navigation("TipoDocumento")
                        .IsRequired();
                });

            modelBuilder.Entity("MockAbiANS.Entities.Protocolo", b =>
                {
                    b.Navigation("Documentos");

                    b.Navigation("InformacoesAdicionais")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
